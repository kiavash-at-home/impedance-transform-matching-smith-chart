Test programs for SDL_bgi
-------------------------

By Guido Gonzato, PhD


- 'cellular.c' is a cellular automaton program. For more information,
please see http://mathworld.wolfram.com/CellularAutomaton.html

- 'dla.c' is a diffusion limited aggregation program; please see
http://en.wikipedia.org/wiki/Diffusion-limited_aggregation

- 'fern' is a famous IFS system; please see
http://en.wikipedia.org/wiki/Iterated_function_system

- 'floodfilltest.c' shows the speed of the new floodfill() routine.

- 'hopalong' is an implementation of Barry Martin's algorithm,
presented in the September 1986 issue of Scientific American. Run it
as ./hopalong <seed>, where <seed> is an integer number.

- 'life.c' is an implementation of Conway's Game of Life. Run it as
./life [number], where [number] is the percentage of living cells.

- 'mandelbrot.c' is a simple, non-optimised program to display the
Mandelbrot set. It shows how to setup and use RGB colour mode. Press
'1', '2', '3' to change the palette; left click to zoom in on a point;
right click to zoom out; middle click to restore the initial boundary.

- 'mousetest.c' shows how to detect and use mouse clicks. Click
around using all buttons and mouse wheel.

- 'moveit.c' shows how to use movement keys.

- 'sdlbgidemo' shows how to use some of SDL_bgi's features.

- 'simple.c' displays simple shapes to test SDL_bgi's speed.

- 'turtledemo.c' uses a simple yet powerful turtle graphics
implementation to draw fractals and simple shapes.

Besides, 'f90_test' shows how to use SDL_bgi in Fortran programs.
Kindly provided by Angelo Graziosi.


Notes on Turtle Graphics
------------------------

Turtle graphics is based on polar coordinates: you draw lines
specifying a distance in pixels and an angle in degrees, called
"heading" (0-359). Heading is the same as the bearing of a compass: it
starts from 0 ("North") and increases clockwise.

For a thorough explanation, please read:
http://en.wikipedia.org/wiki/Turtle_Graphics

Commands available are:

void back (int);              moves the turtle backwards by <int> pixels
void forwd (int);             moves the turtle forwards by <int> pixels
int  heading (void);          gets the turtle heading (0-359)
void hideturtle (void);       hides the turtle
void home (void);             moves the turtle to the screen centre
                              and sest the heading to 0
void pendown (void);          activates drawing (put the pen down)
void penup (void);            suspends drawing (lift the pen)
void setheading (int);        sets the turtle heading to <int> (0-359)
void setposition (int, int);  moves the turtle to <x>, <y>
void showturtle (void);       shows the turtle
void turnleft (int);          turns the turtle left by <int> degrees
void turnright (int);         turns the turns right by <int> degrees
void wrap (void);             wraps around the window
void nowrap (void);           stops wrapping around the window
int  xcor (void);             gets the turtle's X coordinate
int  ycor (void);             gets the turtle's Y coordinate

By default, the turtle is not visible, the pen is down, and the
heading is 0.

Constants:

T_TRUE       1
T_FALSE      0
T_NORTH      0
T_EAST      90
T_SOUTH    180
T_WEST     270

Please read turtle.h for more details.
